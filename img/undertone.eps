%!PS-Adobe-3.0 EPSF-3.0
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 10.13.1 (Build 17B1003) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 403 132
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 403 132
%%BeginPageSetup
cg_md begin
bp
sdmtx
%RBIBeginFontSubset: GVQKKR+CenturyGothicProGrk-Regular
%!FontType1-1.0: GVQKKR+CenturyGothicProGrk-Regular 1.001%%CreationDate: 5/3/18% Copyright 2018 Apple Inc. and its licensors, all rights reserved.11 dict begin/FontInfo 9 dict dup begin/version (1.001) readonly def/FullName (Century Gothic Pro Grk) readonly def/FamilyName (Century Gothic Pro Grk) readonly def/Weight (SnapShot) readonly def/isFixedPitch false def/UnderlinePosition -75 def/UnderlineThickness 50 defend readonly def/FontName /GVQKKR+CenturyGothicProGrk-Regular def/PaintType 0 def/FontType 1 def/FontMatrix [0.0010 0 0 0.0010 0 0] readonly def/Encoding 256 array 0 1 255 {1 index exch /.notdef put} fordup 33 /u putdup 34 /n putdup 35 /d putdup 36 /e putdup 37 /r putdup 38 /t putdup 39 /o putdup 40 /s putdup 41 /space putdup 42 /a putdup 43 /f putdup 44 /b putdup 45 /y putdup 46 /l putdup 47 /k putdup 48 /i putdup 49 /g putdup 50 /h putdup 51 /v putdup 52 /w putdup 53 /exclam putdup 54 /c putreadonly def/FontBBox {-170 -230 1153 970} readonly defcurrentdict endcurrentfile eexecD9D66F633B846A989B9974B0179FC6CC4458BB4CB99E3608702C78822367AAF89059868F63F93207640A6BD5DA214789139C491E02A37BF3866F2964E8D690D48D9F6C4A5EC22355F8123573812483E06B968AE84B5F20A982A0E6576475351697AB8C6EA040355C5542F297D7A3AF28AB93EA0771E0D56DBF00F7CA9CE9FB9FC2E0ECB00D04D5F5F3F24B987B546D6274971A477DEE12C44623C180BCDBA21172627610C4736632D1A4693E79719C3BC43DF5330790A52DCD4CF455ACC213F6B1C4BA249179DB360225568161552A16682E3A3604BFC39D571B1F8F18375BECFB251A6913BFB8EEC875582CF5C5E1A9FBED9724042A56CEA48C3FEE48470B9A6D213D778112DB6F3B735C868AD68DA5C4AFC95D610D31B9FB82D667E1214AC201C49F53927A389366C41BAB9E08352F80D1B075475F6D02C40C16DD459D71CC8DA4C691E922CD815517703F52C6815B8C4F10FE78CE0231999EA4C92ECEA452FFAF18CD1970BAEBA7D6B0E7895E7301F055EE2115B7CB7DE1F1D416530A8BC17A6EFD87B7F07A8ABEBBC1C864B52B8657CD5ED4998E5434E7B7D8D5CCD6F8CD8A13C81674835E3EC025846ABB0D7318EE280F42F9B478C5828459ED0F4449C26112E482C28C3AB8FB56EAE7CCF5CC6A6B404C59F4FC20816893251994715462D8C09CB29C2E0CA1140ED11F7A441A5EF68F3A5F407C294540E15F01E1D99D34BD54CEE14C0393E89DF64B967DB6973C89CC19E4039B0C3F8D349D156B59CAE11D1E8F630E3BDE7C729ABED54B2D886BD52E7027EBD3721853758435E71DB9FC1C9D6E8AA88427378B1F0D27F9730FC184190CE959F4C734A98C4943E78717C3AA1A169B0B72607BE946CEFC8EB16C9BF0D53FC546E53B249604F9762D1C7F36A4B567EA7EE1D8C7B6369823A0C5577CE6D04C6030DB4D54A3A3653108C6F6BF7BF89031ECC2FE6977FDBDBF29235C600E20CCD4D4153A4601248829F8575097172E8A383A12FF787ABEA568EABEC4567F74B7CE168FDC2BEA5EE2F314A0437C641D2D988BDE0CCE6F91D1CAB9D0F83109121E6294793B0A6FFE2BDBCE415F870D7CC70E87DC66BF6BFC62039400C550401087A4BA4696FD92EAEE8AB66DD3B76AA15EB8F171DB6864E8C613BE226F2FF0A28F6783740394CB3F9318165D2CE396276ECE1E6142DC2EEDF8311D1E62E9A822388FC74E68E22A08633BC2CE110B8CF7839124886DF84B4290808DC517E28D464394EAC16D3902D73019D151D2B0D5B05E7997CFFDE95513FB98EF3BCDAC752CB6601B1981EFAE8D180BB08B8DECCFD70A6FC21F111205C468F1363E03F7693BA83C057CB5F6630457BBD2E037E8D19B855185712DFA70948285497870E1165D55AD4B96033B8B4E678EEC0D52B2DB3E4E90E4F87F541E05095692CD2CF906105F57BC600F76E42A2992396D23C5043EB6E79B1AA3CE9CD166547AFB8C8144C4FD83E73C21F2CB40205A40A9D525877A831E938E0E98355E3CF839D932CC5CA03B24E45735E75E991F13653A15250C0601B287392B0CC02BB37F9797ABCD9DE8645F57909D7700029A83757A90BEE245755B4BC274039D2C6A34315CE2598A88257823513E2BF6A6D8C0D45ECBC323E05FD6B6AD17368B7FFCF8B1055D7CE538CB3A0EBE411142AB0A8CE5E914166D9C0DA2D1F523231DBA3397398049028E561C00519431B86FEC272E6344B3540952B89BD3F636F9A6DC95D4E99111F926D4A31536858481F2C772BC34E1ED126B60EE944F5BB42216AB3A64CE4AC08B89F57EEE5B50AEC5A308524A6A31E1628E74927EAEC48D5EDAEE97A5A3DBE4AA3F252B3294391228C96CDAE800946DF685F9AE7B0210BCD4F38D60533F8D20CB7F9CC9A36C629DDD448B3ED2CD748EBE50DA7C4DE7E830E7A639F34906557533795BFBD8977110C3A89766561372AF5178B6718277E35C1F57F91B73549637336D9A1A945D58CD9DE5DF73F8A2C699B5DB6F468077A873B6F384F59D6F4084CDC350D2C4788023AC30AF4CDC8F6D3BE24840B67E0B191B56E7F28E41EB835BD103625E5E4F02A2969400DB72E166160FC1CF46EB2BA58534C39C82B203B0FA8430314C5E8D413B5D480134936F15F35BC6AA9365A6BAB7714E9A89269794B97CB7212AF5B5BF8D786119A44A588B52D0DC448A8957BB079A555ED73D7A53B241796E7B9E42602896ABD01F2D659F6EEC1E5A1B37FD27389F9D31479A6EE4159B0A79A1C2477D0147E266E9CDB58655389E210825E1925D026B2DD6605396023592D910AA084C8BDEEB7A69D84D1F23018788A90A8873F063997C3EC7B62E35E4C64BC522C192BB27396F72AA7C89AB97C1D014ED6FFC1B2FDD11EB6A230B4B87A255A4A6FF45E91D2F06E9B26D96EC6122977CE87D2C175997E555AF80B90AFD535DABC20C9472405B2900DC5BAA8F670A60488EF05423C400252B7E474A55F8391CC3FDA82E3F8DAEE1A05D373963864DA91A23A2B566339C026F04A3E2F0442F300D0E6EA6B7D8C9E635B5989783652F20FD532EDBA7CCCF0DF4EDA09F1EAC68BAD4FDC6A6D8D656ECF945424D5B75BEC33721DEEB47F752331769DACCA4A247C546520EF99892BCDF163E9261941337195064816EBE2D83816B6D403F6511F456E600F2B66147026B32DAE02F44ACA89C7543567655755440E656028D57A0AE8CC0416247EB811C74CC57A96C2185039ECCC61236A91DAF93D12F301EA7AD5031221A47E492D8B88F0CECECF066BBD6A6E85A7711DDCC87575B125C5743E31E9D54ED500599B48FB3FDDF513E4694098F58BC9711F8AB10C3B3F70F7D8DF8454C06D28B289522E7212E6FBADDAA5363807D0DC56531382045A24A432FDD9508C5DD66C975F782DA423251205F53318EEE0A11A3C4C6AD26D4D5D523919DCD9C4CF1993AFB9C3B3EA428641CF77C311B0525C4FD1052DC9B09F52E25FEC725FEC9E5674D2E886CE4CE25DE174728D080C31A1147E414FCD5DAE098CBF09C6C2BE6C6827AB800192A812BA8B6D35847DDD354E0717E5B9793888A1C0C9BEB7321F57839E6FA352FF7C52FB5F58549403364F88831EBFA4FB847852E6EC4B4C32739BF18D404125961259764F446404F1D0EB04F86B259BC348832AE7975C5F4AC2A5DB2F5C9ECCFD7FE6DB25994F49304C27771FD7BB26B7A27ED9C8E892CB5EBADAE8D12C7BCF953BED83B22C085B35257606E4DF451A58FE06B19F22266368026485C34AFAEAE19419E594DF5D5E22CB611DE7444BB033FD1C789BA23C006A1AB3EE124239B3ED62669E5D59DCE729577CC8212685578DA791FBBBDBA63277B25CFEBEA2DEA1549F66957EC2AF518C2DF81859858F2FC7038EA870D343053CA0EDACA279FBF9274A5AE2DA2ABDB8E37CDEAC15E9E072833C727489F0D530F71091637DD3A2BE1B584B721F1387AC836D18463F1A8379C52E003C16A2F520C2F4A2A91FB88DAE1BF8B93B4C1FDD9427DA121A17D759ACECDC79E1201FA0BC5EBAA52D73347FA9E3A082FDC8D12CB7F3BDDE8E34C68CE2A9865F2486EF710EB818B656AE10B34F394FDD206831E5732AA0103D761CA622EE46EEAF43A7A247D1BFA8B70CC4DFFE1FA8A670F9C4D7BCE0634879F84F303829343DDBE6D0B4A0007AD0E93D9EC4920D00086910AC177735FC5DB6454CB2542A91E6824027E54867E79183C793953643D6D24A40D956163D40D7DA12769ABFD0CB7D9730E52A337AF78CF6E7ADDF32E978CBF154198031FF23B928DE56A1BF3FC97AE069E352E77EFCB6C3E43F16ADC3035373F9C91B2EF37F3567D6AEB27B5A589ECB7013710340EF4034E20C7AAE6074B8E37975A11AE45EE1AA9E071B93C8DFF14FB474B10F5E7BCFE08D654BA38240F5D9D23E832DF5C9AEE00A921E5F02017287CD71F0417D9CDEB3F86471F5EC98976C681BF692ADB954E9235FDFD5225F8BCDE3F55ADA876332832B3DB43F276D80EAA00455C20B07DFB324964E6C3546F7D4BC0A6D37DD8CA158B728DEB7F3DBE6167BB8DCA637820E9795FB0B6A6FD7F0591169E84BD0F80B937B4E436932C4A5EAC47C91F6B0EF0096CC0CE2D68A39A9DB37E89CC540A00E0F0CCD3A34EA01BB616EB311F3ED09EDF291F0E8ED5A833C1CEC3326A2056078C508E0A248E013972BD9950825848EFDCB9A34D75CD7255EAE55C3E8AB4CD98F9A8DC6BD3C1F79AB914198FF065B22F08BACB26E2BBC45E6D8FEFF72B6B0F9CB22E46694D28338E613B8553409DC656F72B890A8D2815265646CF5A634C4614293F5AB2B75677947948677EF86BAFBE2A135A50675C7055CEA5913C4D2AADF3CE6028F99381F7A7A1A160FB9FD23346CE0655D224EA5553066A0CFA48AAE9D6AD496ADD92947F56A10862BAB18172859A7BF47C7DDC9917B8960C99426278C98B63403C4A005AB498B5705FE1EC6169FA023C628D7735AD6DBF7B5022580072DECD59008920C4563E92C1D2D657D16B0EDEE50A78D15EEF45F6908062F924AE4462688DF08555ABA3BFEC60E6B537D87D0D41D4792F5152ED41477E66A8CF58B6ABBC7391A489548BCBE50678A7A45A6797EB017B460128C4F2A6BA18F7EB5CFAF26C661E263D8775A6A80D2E93406E5621A3AD9A197CD9DAC9E7B43729AF5447C6AE8E5E48E111F1351BC169B3080C9BCE889FD2AE8D634A023887192334486B0821CA13A777565A2840112360BC4D3D8C4D581CF0150E3360078EA22F5B4C877C0A7CB0BDD57FB85584979B4490E0D99C30658CE2509782BA0F5D07E834D81552A1E9224AAB1F54D0EBDC26E647C25402550363737BCF5BE5C90840F5C98D7EC2E7D1ADB2B05DE44668389D9E94F3C281E9E9280B86C5A45234439944FA051C811AC47E801BDD572E00535139C2F214D6C5090E4A9FD83A266869CBFBC4EECF1DF383DA75236D6388F48063ED2B1688CA07D352660B195BDFB447FDDADA0EFA20E6D72E118D24A38F50A174BD029AC70196DF769C2B9B48835EB0A8A83E81ADF8B708C9DCA3F7507794E1AA428442F482A22487043567124A6A5ABD67CBE3DFBA051BAF9478292D3EC6BD941F830024FA6F97D530C6B317A2F1FB2E39EC518C06D963D036FDA05A29F2EFD592E61E4764C08C5992A3FCC5504163F8A9092B8FFBD9234E8C4383277A9A6D494AE5F8B3438ECC8D18AF9FC5F5CC8EF66A908F74C07747D3D01C7B17BCE995CB6A34E02B3A504C51822F1BB9F48C596B77C4BF60416AEAACBAC0C72122FB416017A45B2F10D1D4F5916C10FEAD6CA0C17CD40C79D177A0B80C47A00273BAF1BAEE654950EE5D983D3490D7CF664433204284C98DD8F1D50E15803C85AEBE60807CE2A2361E0BCEE8BF234A95B2A86EFEDE5779B03B7664F3D06E0D144EBD4E082E144EA5388FFF9F5E6F78AB42047956A6670DBD96F9B27D7DB45D61E06C631A71A29125F61F7F435BCB0FE20ABB6ED8A41E16E53E0180FAC6C31D60906B37303CCE6F092E407B8D2DA54D2B07A8B56AEC5A5F6B082422FDF0C0FC9F9DD2105B890A46F212D47675EA93DF37757CD21F02E19782E7667031880E63F770C8ABCA552CDB0BA7995930D952FC81C025C1212C435B8A0501BC00DB088B1A2EC0AA5A701F45CB0ADB36FC90C356D6CB9984FFD9680C2EFC60CD43F2C0F23EC9DFF65320B01A73660D33C7B67F286A5B525E538ED0BC216A4676DFB35804CB8A70797F52777305188D9E9A622921358AE762B90570FABA72B5A05A0139EAE4ED3E94A2984A6FEA0EE66E5E1606C4AEB9C2A16016EE873B5ACA47F0019622F6617F9C4F2FB2C505558DA25E124AAFBB6530D0ACAF7CEC63D09CD36F5E7200B7A723DB609E929A72AF07FB21A9309C1EDA3866EB4338C61A0ADE16FE8B90D1C21779EB2128928D157CB2344E13860E19632440D5B5F6F4214CFF1EAFE1CEE50321693D125B8C450E19270584DB74B0ED33B57C03783879A16FBD5E2059FE4C8BBA4B31534B53DB06ABAEB48F6AC98E9AA7F7A7D2AEF3D8D68D1E9E8190AC56F191935471983188DBAF759C239C714721849516B8422975F1A85297C8BB1EE27DBC57FA0A898F5F551DEB1774D7AF8E1464BD3DA0270532E6BD13D06D80BC51FD799C2C276F4F821E58D4A341A93426A34545DF147694F808C58BBD6401C722486D22F3036FB7896CCF58A9573D3440599E8D450773AF4A60EA72927FEFEB62D9800CAA07E05638A96A7E9FF694FB7AB50BC260A17BBA25AB56C24A3AE7E9F501499D81171C33A59760F7486EC9B8274DB1D7B711D753F908C984121239502DFECE22082C1494782E3A025A1AA6D4EA28C36CA64168AFE2ADA399D875584AB1CFF082329FC10A9D6F6B71456CE21B905994D3185C6E05A10CA5C73D377C605F9AF7160A920D964A08B4DED566402BDE3571162190FBC8358D868E20258A25FE1598DE1FF3E48C297167AE6283FBF3026BBF1052E07FF480AF898C88317A8BDE8C3A8A316CCC74AC003BA6DC18EF44C01832AB5D608F30FD7320ED72B89444155800B4EF3B209A247E77248C673D66F8D2C58AAF0DFBFF97AF6CE51446FC561DCE28865F91A5073DEEBDA276D23A5521857857F0ACDA1D13523436D99E2A972104605AE3571EC544542211BA012D6525CE3CC122C131C9D7F68EEEA351B86B83FA1A396FE30811FFD8D3812DC41B4254B8D054E0A939A077803B3FE53726A092AA42E9B1118E12CE9D8CC2754A192A1242788A231A7BBAD87C2C098BE09CFDDA954D0FC81F0BB7D958C9F956B2FC698499B5E185C4ABF426DBFC2247B0FE9643A653ADFD4C5ABCAD71F798E93FEE964629A322F4064F71A6ACC3976CD2D8846600CF07154B59B68C0D3A1749B6DB3F453AD904935A76673193934550A37E4E44B291BF9EB4A25BCEF83CCE55D491C6E00F1D66FEFF51110D933AADA0BEB9A09D8DF47312FA2256A13668033AAB97376343C850A2AC2357B3E747564974390F21CFC49DB7DE424F2B46AD29847B6DF4C57A3A6219CFC3FF8553F1D35D2215985E983F427AE76772DA60872CBB7530D0CB2CAF8B7CDA6B54ADC08DAE99796C73AD12C7458FE2E6FCE1D7414779EBA72BA5BD2E2357F8AE84F4606AE525B9FFB6EEC9599152783E9A27570155969E8A48A4AB9F6C0C9FEBE1C5F03EC39486E16F8ED16036018BE8C307DC33163EC07977CF22050978E6B769220DB5FD56F925DCBFC26BD5F4A2C592486CA67193B1219D08AA4EA996537256D579B832FF868BBF3F89BFD17E9336ADBC69E6375CC71A5B4CBE739E89FDA12F9BF9AB722C941E91340E9223FF3BB5AFD66F9AD01BF2474A1D6B69BFA8CF753ACDA89587B306D1A580502CD929C3808209FB0C5183FDB53D169A9A9C33D3755CE7A9DDFDE2BC9263E404D2C2A1B261D262A55EA73A0CD3CF671D813867139CB91A74D03CAABCB4AF97085E8FE07E8769F5866E3B6158F1E817EEFCB13CA16F67E73AF40710A062A397B730CA7E0F7E98C1F2CC06072CDA16989DB6CC6002057E9266B9D56DF7730009A99CD361A272CB2796824D518934354A3C733CD6C911CD959B7A862706B4A5DF5F4D40E2C5E68000EA52D819681F528E7153F19C8385F068A6DD530DC8313A3D72CF48082657C3CAC490CA8D766B89E0DE02182BDE0A8A292DC0CE7927650932BB3D8A58B96CABB8D1236F0F81B2EB48F47D50657F31F98A0AB784CCD59A0E6DF139E762C8238D44BEDA19CE0DEFC71A60322BA372DB5D0C97C11B49DEE90E3F5176FA0E3CA1A1912F9291E3147E40B93F8263A707DB5F10E4212F236622673316E3F84FAA608807348E6B2697C09C6CC14857F1F0D6257BA6F97C347DA1D807B9CAD5819B372C3AA00B83DC83C8B9D5003D1DDE4DC282D4F9FC9CE241EFC212204E8A3307ABADF9EB6B2FFF71D68A848329D32F4A8CDF0433D4FB6B3E1046E398F39A9553AF48D23D7F8F23B32788775D17CC339CEAD473657E6830F47A84F118D3982155865D349F463DDACB0883A874EC5C9B8E8CC2C2B680133C92E0C9DB676C9EF692A4A3F3B44A6FEFAC43D8FF6C78E9F8849273BC51EEF6193D23D2AE89B951A7566674068B3D3B646497DBDD583A53BE22A595F080368619EBD938C6FDE046BE0B56538165D6D73E42CE67501FE42EA5F5A68CE209F378A5DDE87DD9A41A43BA08A336B8CDA2A4BCE933CE14EF4B9B9904A4F652EACDA45D568370857199553A8D348873F5D77A8FD6A0ADF7F65CD6AF86A2FA096186CEDFDB22470CC5FE55C5FAB5960A2E3E91BCA30AC848F6EB179BB288231E10AD971D82FC1EE6868FE3D060DD7B5D4BC6257DD1D94CCC6EC92FA9101102BA6BFB1602B47F15B6A3548B9D11695A6D417352B29719EEF239B8B2FE5F1C5D692AFD90810B401E70E61B74CD2D912408F126E88CEA492FC6F140669019EDF3CADB6B351853990FD815365BA0682C80D7356CA15B55362A380448B3897EB00D0E4463C5BB360966B85DC50947091AEC07C9445C319F7DE083A0533ADA4FCB62E6C17C7F23183D53E5AC8D7C8AECEFD098933E669784DD00932180F695E3A49F8D37C23E23D8D835703F4EBDB37D4C58C8CEAA65BDBE9E0F29C1B5087D4393E13E51764A3D5C3EF7AF656EEEB8584D6AC888FD7E0F894A7C37152D45E2BBCB11A229039D4049009474B4B7BCF1B7D82D42CB8263B4D364B1B1D38E5BC88AB3B87D20E40D9FEFC0E5D05E35327C412EEE15A10D8BDB16BDE21893215A3427D3AE8AD9994E963269C3DD718676E6CFE0CF1F970F191A8DAC888B55973FC4D20F04FAE306EEDC2BEC16AB3FE712543A87410F49C483EEF2B8C82F1D8BE2B5E3FE0CDEA0B6076914AC842ABC9C4B090920FD136CB9593580DBFE3270E052EA4D95BDCD3122BC61E724BBEB20A21065BEB5150A71F42F57F3C50AC8B2F74587B0EB13E09955C2E797245555B5871E010E83EB22482EED12C7357E6ADF9AD8C35EEA50E37AC9EAAD417F7608DDF8615926F46A083E70D1964D3CBE0DADF963CC81403D301BE801E5AB054BC0A6BA6777040255763E015B89FE2A7BDAB36DB636F6E41966DAACA2BBB14579A125DB55A17FE7856BD33081CD7941E346E3BEBE29EB579EAA0C0981ADDB08F07D27603250691EFC8497034F094ECA713655D727E400A61066CC8356D22DB60A67AF0D7DAAC74D721E0E9713A2CAB68477A595DAC953520AA9D163E30D3B6B80FD73F4AFAD1A45B7E6AEBD62F233AE5A159D3732759C492DF9AD088D7D2D18BADBAEE385C354B0B46EC340FA9455692BECC692F0FA430D323A712AF2C402D46E74806DBEC2DEF189FAFF9E6066FDDF05A44CB2FA40312068D723645033411564F880E9CEB092F7D183BF2489B0A126012D9944DA65E367D8012518554BCAD3C43E56A98A1CB81DBF58663959CFFE447329DA63E4B869CE1B93D71EDBD5CE7A5B75C23E3586BE7D755E699CC089E5947EA91FFB895F7E0CD51402D5115299CADE7B6E896E6F5024A209AB0164D1608C15298D3B7B3B66145706F4D3699EB7AA1F103CFBAB5358D818508ECC2E78E9ACDD4D0C05C9D0BE14C43162DE5E9AF29404A2FA1C5E638F27F3AA3B0BFD0E16918EC312E6DD1FFA9EBAA5A1D219C1B0B90D912D9B1CDF0E47C24D8F817BA632FB58F742EE2BED314C2C2071B7A553AE1963C360E8D7FCDD593B562C842DF7B43EBAFF69E76BD8435E4AD8FCC02AEA60E5627E420B07EDC558806864FB0B74BF0BD09414009F6566E955531827B450724C96204A513E636615CE385C2A3978B173693BF4349A6799F42BAF498E27CC354F0EF838ACFE7E6651E69D99AA8208A644A9BBC862687183DF2277C44EF3DA6E71E0B9E3D7378A95DAAFBC1298762844D53631CC5526E93D07D8436BB9B438F923953C393E45A20ABF6DA9542F5D1D639F9730B2D9A7131E0B81F669747207F5F868DA28879BDCC763B342C3B2B0836782AEF2CA9BF8218646661EAFC0A2292304C31903D45874CF836D5B30D56DBC22A6738BC961FC344966CD04C707651D912C23EB034B2A96C5240804C05E0C1F3F43485DAD2C491CE505977777C875135C5E7DDEC00DB27D3172E7C3D16E70529DCDB8DCEAF7369C9714C58E82D540810E761D2A53B8D7E8614AEA28FA16D05DC37B3D295082C1193B5101EC1472F8581AA3B96489DE7E60CA600EC355076562A236CD521FDA1FE67CC0D9F9E692F7CA09DC02F73BFEF2056C89ADE16AC79BA842F224892CF2D1F2CBAEE794BDB9BD63CC4A7386420F57CCC2CC1E0B67E4164B233209D7A8249DE6D0CC6DA86920255999FC12D803066ED610CD587F6F0BD498DCA16E8F24F279A3629616C0AF945259EF364631685626ADF264625C7837ADF6F784EADD83AC5B5E9F604A11A8FA5F28B70518FA837D8A5BBFA29C3829F02C1B9D6ACB906EB9580D0D3D58BDB4B35FFCFF9080C12A9D7CC48F1CD7EF461C18B4D50791554EAFEC90D0AE1BB28BB2763B2E12D162F6D8C1909025C3C44D6FFDC89A11BDF8A83DD9FDDDE800A5D96F503F2392C3D4CEA963D9DD10779423FFEE27D4D0A050554F2BFC179F35186DB82E1B0B2F7D710723E7395FF8B06A4DA8D0105E7540D1374F09D3676D2F6767B4559C114D8D0D36FDCB451EDA76E0F06E75F26DB25763F74775790DBFFC24AD6451CCF574CD0133936C8B2B1D5DC377AA9CECFA8F0EA2DDCFEDFCD2BD7272E84697091890EFA73B78C889CACAF1B0ECD6B1267D94AF028386716BDFEDE958D0A858D8F373C8FAD4735E7AE57D9179FDEDBC6F6A5E62415D1906A2930B434E4520669B3D3C52AD5454240C9FA45F141EAF008A9DC95BEA08FA604EBBB8D038578BF2298D435FBBF95DE8E811D1388AF04C4E83A61A28BF6C3F60F5DD30D40E6B2D6B7E52B0CC2808D4B2DBE046AC09BF2D39552CBA8B23130D9F9C78309A77D99BF08334C3D01782E74D45DD4C4DD3A9EBD087DC2ED71F0F84639A057CAEB7CAF399E8412A3A7F1B370DCBA576ADB375429155034A6D57314DD925E2F0B8D357193F6761253E344D57FE1AEEA30C965F661C239E69D6C7F9FF39D5802FB1A602FB5D3C29F6524A72E9EB63076703B29D0DFECBF67C0F83A6D79492C1DBCC29C6DFFE7B4BC99A4C32EDBA2398AEDF34BA47BC96BB1E9A03BEF562C9D9BAAC977F2BBB28CB5E3E1D691704934AEA7FE16309E6AF4F80D20A479EFBABB831343726C211D748BFEA9438D232AAFF4B976C8FF26EA8DA74B0C34D05D5F1649DC12BF56DC51C30FFEDCECDFAA8078D17A8BAE0FCB424334C96CB836D6F77A07D7235ABF2F63B395663168ABA5B0C88259B4FA5B7324EF0574DCFE7652781288EEA3E64B94312599DDED15FB29B08D5DE58303276975888F45356B0722D683F4BDA7A5AB1B5EEA5CB7D0CFCD56AAA2088C2B3470A35DF75BF0732D94BC1DA63CE12C59A83F84D827E17E48E11539A4D63CD80AE49DE012A61E54C3D27124B49FB4A2A432E86888A3F51A3C8925E6B4450D6153492887F8B80C8D5A45C322160CEB8B1B1136661575E392F04F7F6BB928B17A9A68DE10385D152EB317DF75463019A26BFF2B9A9941A382CFAE9B2FEDE17F94B5EAD2E6ACEF403ADA35CAED850F3EEAD7BDEF4E2149A26B1FA0016825079DF6590D6F0470093EE43AC1067E69AF9164B3374E824E14526CC74AF02EC19C9FAAACF6B08883716D5573D5CEF2362703315F9344F80E152DA24F304916D571924BFEBC93B2AF43680253EBBD50BA441EF3006B62021D60208C7A61B57EE0689EEF86BC4A71C1499CEF50F2E0C482F4C2ACF8B9EF6B35EE0C8C0A494C40CC7B65751465F6AFAEDF9A47F1B00E2213042C32FBC230285D4BB2575CA7BF42222683CB1AE8870351FC91C18953FC456A4CFD31F4426A46E20CE8FBB395B59A4AB116546642AE5A8345D90617FBC83C9E0ABA7B77E16B542AF050735B83B04B0684428BE68A28C35D3D7C33FC42A22F59BCD0E08B6A34FE1EDC71CB19190C718C7D0DF7BC6D5854BD56823A8A2A150263CCF942A83F76457AB5D40AA640297B952F95F5CC7897CB40C10A7DF2FB6B342665149CDCB2A954B546B6052343EBFD300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000cleartomark%RBIEndFontSubset
/GVQKKR+CenturyGothicProGrk-Regular cguidfix
/F1.1/GVQKKR+CenturyGothicProGrk-Regular renmfont
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
] def 
/MatrixABC [ 0.4124 0.2126 0.0193 0.3576 0.7151 0.1192 0.1805 0.0722 0.9508 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
%%EndPageSetup
0.60000002 i
/Cs1 SC
0.98713863 0.97999138 0.97999138 sc
q
0 123.11847 m
174.73491 123.11847 l
201.5 132 l
229.64847 123.11847 l
403 123.11847 l
403 0 l
0 0 l
0 123.11847 l
h
W*
0 0 403 132 rc
-5 137 m
408 137 l
408 -5 l
-5 -5 l
h
f
Q
0 0 0 sc
q
26 25 352 80 rc
1 0 0 -1 26 104 cm
/F1.1[ 12 0 0 -12 0 0]sf
6.638 9 m
(!"#$%&'"$\(\)*%$\)+'!"#\),-\).''/0"1\)*&\)&2$\)3$0"\(\)'"\)-'!%\)4%0\(&5\))[ 7.296000 7.320000 8.220000 7.800000 3.612000 4.068000 7.860000 7.320000 7.800000 4.656000 3.324000 8.196000 3.612000 7.800000 3.324000 3.768000 7.860000 7.296000 7.320000 8.220000 3.324000 8.184000 6.432000 3.324000 2.400000 7.860000 7.860000 6.024000 2.400000 7.320000 8.076000 3.324000 8.196000 4.068000 3.324000 4.068000 7.320000 7.800000 3.324000 6.648000 7.800000 2.400000 7.320000 4.656000 3.324000 7.860000 7.320000 3.324000 6.432000 7.860000 7.296000 3.612000 3.324000 9.972000 3.612000 2.400000 4.656000 4.068000 3.540000 0.000000 ] xS
39.217999 28 m
(0+\)&2$-\)*%$)[ 2.400000 3.768000 3.324000 4.068000 7.320000 7.800000 6.432000 3.324000 8.196000 3.612000 0.000000 ] xS
0.13175814 0.37615615 0.92899662 sc
97.262001 28 m
(\))s
0.2886557 0.56455189 0.88623869 sc
100.586 28 m
(,.!$\))[ 8.184000 2.400000 7.296000 7.800000 0.000000 ] xS
0 0 0 sc
129.59 28 m
(&2$"\)-'!\)2*3$\)6''.\)!"#$%&'"$\()[ 4.068000 7.320000 7.800000 7.320000 3.324000 6.432000 7.860000 7.296000 3.324000 7.320000 8.196000 6.648000 7.800000 3.324000 7.764000 7.860000 7.860000 2.400000 3.324000 7.296000 7.320000 8.220000 7.800000 3.612000 4.068000 7.860000 7.320000 7.800000 0.000000 ] xS
34.754002 47 m
(0+\)&2$-\)*%$\))[ 2.400000 3.768000 3.324000 4.068000 7.320000 7.800000 6.432000 3.324000 8.196000 3.612000 7.800000 0.000000 ] xS
0.10739399 0.77365011 0.062074553 sc
96.122002 47 m
(1%$$")[ 8.076000 3.612000 7.800000 7.800000 0.000000 ] xS
0 0 0 sc
130.73 47 m
(\)&2$"\)-'!\)2*3$\)6''.\)!"#$%&'"$\()[ 3.324000 4.068000 7.320000 7.800000 7.320000 3.324000 6.432000 7.860000 7.296000 3.324000 7.320000 8.196000 6.648000 7.800000 3.324000 7.764000 7.860000 7.860000 2.400000 3.324000 7.296000 7.320000 8.220000 7.800000 3.612000 4.068000 7.860000 7.320000 7.800000 0.000000 ] xS
18.577999 66 m
(0+\)&2$-\)*%$\),'&2\))[ 2.400000 3.768000 3.324000 4.068000 7.320000 7.800000 6.432000 3.324000 8.196000 3.612000 7.800000 3.324000 8.184000 7.860000 4.068000 7.320000 0.000000 ] xS
0.2886557 0.56455189 0.88623869 sc
110.702 66 m
(,.!$)[ 8.184000 2.400000 7.296000 0.000000 ] xS
0 0 0 sc
136.382 66 m
(\)*"#\))[ 3.324000 8.196000 7.320000 8.220000 0.000000 ] xS
0.10523128 0.77213579 0.059133612 sc
166.76601 66 m
(1%$$")[ 8.076000 3.612000 7.800000 7.800000 0.000000 ] xS
0 0 0 sc
201.37399 66 m
(\)&2$"\)-'!\)2*3$\)"$!&%*.\))[ 3.324000 4.068000 7.320000 7.800000 7.320000 3.324000 6.432000 7.860000 7.296000 3.324000 7.320000 8.196000 6.648000 7.800000 3.324000 7.320000 7.800000 7.296000 4.068000 3.612000 8.196000 2.400000 0.000000 ] xS
145.35201 78 m
(!"#$%&'"$)[ 7.296000 7.320000 8.220000 7.800000 3.612000 4.068000 7.860000 7.320000 0.000000 ] xS
ep
end
